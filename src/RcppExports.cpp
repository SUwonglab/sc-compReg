// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// loadPeakNameIntersectFile
Rcpp::List loadPeakNameIntersectFile(std::string path, char token);
RcppExport SEXP _scCompReg_loadPeakNameIntersectFile(SEXP pathSEXP, SEXP tokenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< char >::type token(tokenSEXP);
    rcpp_result_gen = Rcpp::wrap(loadPeakNameIntersectFile(path, token));
    return rcpp_result_gen;
END_RCPP
}
// mult
arma::sp_mat mult(arma::sp_mat A, arma::sp_mat B);
RcppExport SEXP _scCompReg_mult(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(mult(A, B));
    return rcpp_result_gen;
END_RCPP
}
// mfbsLoad
Rcpp::List mfbsLoad(std::string motifTargetPath);
RcppExport SEXP _scCompReg_mfbsLoad(SEXP motifTargetPathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type motifTargetPath(motifTargetPathSEXP);
    rcpp_result_gen = Rcpp::wrap(mfbsLoad(motifTargetPath));
    return rcpp_result_gen;
END_RCPP
}
// mfbs
Rcpp::List mfbs(std::vector<std::string> TFName, std::vector<std::string> motifName, arma::vec motifWeight, std::vector<std::string> elementName, std::vector<std::string> match2TF, std::vector<std::string> match2Motif, std::string motifTargetPath);
RcppExport SEXP _scCompReg_mfbs(SEXP TFNameSEXP, SEXP motifNameSEXP, SEXP motifWeightSEXP, SEXP elementNameSEXP, SEXP match2TFSEXP, SEXP match2MotifSEXP, SEXP motifTargetPathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type TFName(TFNameSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type motifName(motifNameSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type motifWeight(motifWeightSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type elementName(elementNameSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type match2TF(match2TFSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type match2Motif(match2MotifSEXP);
    Rcpp::traits::input_parameter< std::string >::type motifTargetPath(motifTargetPathSEXP);
    rcpp_result_gen = Rcpp::wrap(mfbs(TFName, motifName, motifWeight, elementName, match2TF, match2Motif, motifTargetPath));
    return rcpp_result_gen;
END_RCPP
}
// compReg
Rcpp::List compReg(arma::mat TFBinding, arma::mat match, const arma::sp_mat& E1, arma::uvec E1Idx, const arma::sp_mat& E2, arma::uvec E2Idx, const arma::mat& O1Mean, const arma::mat& O2Mean, std::vector<std::string> symbol, std::vector<std::string> TFName, std::vector<std::string> elementName, std::string peakGenePriorPath);
RcppExport SEXP _scCompReg_compReg(SEXP TFBindingSEXP, SEXP matchSEXP, SEXP E1SEXP, SEXP E1IdxSEXP, SEXP E2SEXP, SEXP E2IdxSEXP, SEXP O1MeanSEXP, SEXP O2MeanSEXP, SEXP symbolSEXP, SEXP TFNameSEXP, SEXP elementNameSEXP, SEXP peakGenePriorPathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type TFBinding(TFBindingSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type match(matchSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type E1(E1SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type E1Idx(E1IdxSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type E2(E2SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type E2Idx(E2IdxSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type O1Mean(O1MeanSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type O2Mean(O2MeanSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type symbol(symbolSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type TFName(TFNameSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type elementName(elementNameSEXP);
    Rcpp::traits::input_parameter< std::string >::type peakGenePriorPath(peakGenePriorPathSEXP);
    rcpp_result_gen = Rcpp::wrap(compReg(TFBinding, match, E1, E1Idx, E2, E2Idx, O1Mean, O2Mean, symbol, TFName, elementName, peakGenePriorPath));
    return rcpp_result_gen;
END_RCPP
}
// initializeMatrix
Rcpp::List initializeMatrix(const unsigned int POnRow, const unsigned int POnCol, const unsigned int XnCol, const unsigned int k, const arma::sp_mat& D);
RcppExport SEXP _scCompReg_initializeMatrix(SEXP POnRowSEXP, SEXP POnColSEXP, SEXP XnColSEXP, SEXP kSEXP, SEXP DSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type POnRow(POnRowSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type POnCol(POnColSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type XnCol(XnColSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type D(DSEXP);
    rcpp_result_gen = Rcpp::wrap(initializeMatrix(POnRow, POnCol, XnCol, k, D));
    return rcpp_result_gen;
END_RCPP
}
// computeLambda
Rcpp::List computeLambda(const arma::sp_mat& PeakO, const arma::mat& w1, const arma::mat& h1, const arma::sp_mat& X, const arma::mat& w2, const arma::mat& h2, const arma::sp_mat& D, double alpha, double beta, double eps);
RcppExport SEXP _scCompReg_computeLambda(SEXP PeakOSEXP, SEXP w1SEXP, SEXP h1SEXP, SEXP XSEXP, SEXP w2SEXP, SEXP h2SEXP, SEXP DSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type PeakO(PeakOSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type w1(w1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type w2(w2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(computeLambda(PeakO, w1, h1, X, w2, h2, D, alpha, beta, eps));
    return rcpp_result_gen;
END_RCPP
}
// iterateCluster
Rcpp::List iterateCluster(const arma::sp_mat& PeakO, const arma::sp_mat& X, const arma::sp_mat& D, const unsigned int k, const unsigned int maxIter, double lambda1, double lambda2, arma::mat W10, arma::mat H10, arma::mat W20, arma::mat H20, double tolX, double tolFun, bool verbose, int loopUpdate);
RcppExport SEXP _scCompReg_iterateCluster(SEXP PeakOSEXP, SEXP XSEXP, SEXP DSEXP, SEXP kSEXP, SEXP maxIterSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP W10SEXP, SEXP H10SEXP, SEXP W20SEXP, SEXP H20SEXP, SEXP tolXSEXP, SEXP tolFunSEXP, SEXP verboseSEXP, SEXP loopUpdateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type PeakO(PeakOSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type D(DSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< double >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W10(W10SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type H10(H10SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W20(W20SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type H20(H20SEXP);
    Rcpp::traits::input_parameter< double >::type tolX(tolXSEXP);
    Rcpp::traits::input_parameter< double >::type tolFun(tolFunSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< int >::type loopUpdate(loopUpdateSEXP);
    rcpp_result_gen = Rcpp::wrap(iterateCluster(PeakO, X, D, k, maxIter, lambda1, lambda2, W10, H10, W20, H20, tolX, tolFun, verbose, loopUpdate));
    return rcpp_result_gen;
END_RCPP
}
// cluster
Rcpp::List cluster(const arma::mat& H1, const arma::mat& H2);
RcppExport SEXP _scCompReg_cluster(SEXP H1SEXP, SEXP H2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type H1(H1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type H2(H2SEXP);
    rcpp_result_gen = Rcpp::wrap(cluster(H1, H2));
    return rcpp_result_gen;
END_RCPP
}
// postLapMatMult
Rcpp::List postLapMatMult(arma::mat W1, arma::mat W2, arma::mat H1, arma::mat H2);
RcppExport SEXP _scCompReg_postLapMatMult(SEXP W1SEXP, SEXP W2SEXP, SEXP H1SEXP, SEXP H2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type W1(W1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W2(W2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type H1(H1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type H2(H2SEXP);
    rcpp_result_gen = Rcpp::wrap(postLapMatMult(W1, W2, H1, H2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_scCompReg_loadPeakNameIntersectFile", (DL_FUNC) &_scCompReg_loadPeakNameIntersectFile, 2},
    {"_scCompReg_mult", (DL_FUNC) &_scCompReg_mult, 2},
    {"_scCompReg_mfbsLoad", (DL_FUNC) &_scCompReg_mfbsLoad, 1},
    {"_scCompReg_mfbs", (DL_FUNC) &_scCompReg_mfbs, 7},
    {"_scCompReg_compReg", (DL_FUNC) &_scCompReg_compReg, 12},
    {"_scCompReg_initializeMatrix", (DL_FUNC) &_scCompReg_initializeMatrix, 5},
    {"_scCompReg_computeLambda", (DL_FUNC) &_scCompReg_computeLambda, 10},
    {"_scCompReg_iterateCluster", (DL_FUNC) &_scCompReg_iterateCluster, 15},
    {"_scCompReg_cluster", (DL_FUNC) &_scCompReg_cluster, 2},
    {"_scCompReg_postLapMatMult", (DL_FUNC) &_scCompReg_postLapMatMult, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_scCompReg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
